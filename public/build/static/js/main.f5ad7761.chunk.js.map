{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","serviceWorker.js","index.js"],"names":["getBookQuery","gql","getBooksQuery","getAuthorsQuery","addBookMutation","BookDetails","book","this","props","data","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","state","selected","loading","onClick","e","setState","displayBooks","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sgCAEA,IAAMA,EAAeC,YAAH,KAmBZC,EAAgBD,YAAH,KASbE,EAAkBF,YAAH,KAQfG,EAAkBH,YAAH,KClCfI,E,mLACkB,IACZC,EAASC,KAAKC,MAAMC,KAApBH,KACR,OAAIA,EAEA,6BACE,4BAAKA,EAAKI,MACV,2BAAIJ,EAAKK,OACT,2BAAIL,EAAKM,OAAOF,MAChB,wDACA,wBAAIG,UAAU,eACXP,EAAKM,OAAOE,MAAMC,KAAI,SAACC,GACtB,OAAO,wBAAIC,IAAKD,EAAKE,IAAKF,EAAKN,WAMhC,oD,+BAIT,OAAO,yBAAKQ,GAAG,gBAAgBX,KAAKY,0B,GAtBdC,aA0BXC,cAAQrB,EAAc,CACnCsB,QAAS,SAACd,GACR,MAAO,CACLe,UAAW,CACTL,GAAIV,EAAMgB,WAJHH,CAQZhB,GCjCGoB,E,kDACJ,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAEDkB,MAAQ,CACXC,SAAU,MAJK,E,2DAOH,IAAD,OACTlB,EAAOF,KAAKC,MAAMC,KACtB,OAAIA,EAAKmB,QACA,iDAEAnB,EAAKK,MAAMC,KAAI,SAACT,GACrB,OACE,wBACEW,IAAKX,EAAKY,GACVW,QAAS,SAACC,GACR,EAAKC,SAAS,CAAEJ,SAAUrB,EAAKY,OAGhCZ,EAAKI,W,+BAQd,OACE,6BACE,wBAAIQ,GAAG,aAAaX,KAAKyB,gBACzB,kBAAC,EAAD,CAAaR,OAAQjB,KAAKmB,MAAMC,gB,GAhCjBP,aAsCRC,cAAQnB,EAARmB,CAAuBI,G,QClChCQ,E,kDACJ,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXhB,KAAM,GACNC,MAAO,GACPuB,SAAU,IALK,E,6DASjB,IAAIzB,EAAOF,KAAKC,MAAML,gBACtB,OAAIM,EAAKmB,QACA,4BAAQO,UAAQ,GAAhB,cAEA1B,EAAK2B,QAAQrB,KAAI,SAACH,GACvB,OACE,4BAAQK,IAAKL,EAAOM,GAAImB,MAAOzB,EAAOM,IACnCN,EAAOF,W,iCAMPoB,GACTA,EAAEQ,iBACF/B,KAAKC,MAAMJ,gBAAgB,CACzBmB,UAAW,CACTb,KAAMH,KAAKmB,MAAMhB,KACjBC,MAAOJ,KAAKmB,MAAMf,MAClBuB,SAAU3B,KAAKmB,MAAMQ,UAEvBK,eAAgB,CACd,CACEC,MAAOtC,Q,+BAKL,IAAD,OACP,OACE,0BAAMgB,GAAG,WAAWuB,SAAUlC,KAAKmC,WAAWC,KAAKpC,OACjD,yBAAKM,UAAU,SACb,4CACA,2BACE+B,KAAK,OACLC,SAAU,SAACf,GACT,EAAKC,SAAS,CAAErB,KAAMoB,EAAEgB,OAAOT,YAKrC,yBAAKxB,UAAU,SACb,wCACA,2BACE+B,KAAK,OACLC,SAAU,SAACf,GACT,EAAKC,SAAS,CAAEpB,MAAOmB,EAAEgB,OAAOT,YAKtC,yBAAKxB,UAAU,SACb,0CACA,4BACEgC,SAAU,SAACf,GACT,EAAKC,SAAS,CAAEG,SAAUJ,EAAEgB,OAAOT,UAGrC,iDACC9B,KAAKwC,mBAGV,4BAAQH,KAAK,UAAb,iB,GAxEcxB,aA8EP4B,sBACb3B,YAAQlB,EAAiB,CAAEO,KAAM,oBACjCW,YAAQjB,EAAiB,CAAEM,KAAM,oBAFpBsC,CAGbf,GClFIgB,EAAS,IAAIC,IAAa,CAC9BC,IAAK,kCAiBQC,E,uKAZX,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,yBAAK/B,GAAG,QACN,oDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAPQE,aCAEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5ad7761.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nconst getBookQuery = gql`\r\n  query($id: ID) {\r\n    book(id: $id) {\r\n      id\r\n      name\r\n      genre\r\n      author {\r\n        id\r\n        name\r\n        age\r\n        books {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getBooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAuthorsQuery = gql`\r\n  {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst addBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\nexport { getAuthorsQuery, getBooksQuery, getBookQuery, addBookMutation };\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBookQuery } from \"./../queries/queries\";\r\n\r\nclass BookDetails extends Component {\r\n  displayBookDetails() {\r\n    const { book } = this.props.data;\r\n    if (book) {\r\n      return (\r\n        <div>\r\n          <h2>{book.name}</h2>\r\n          <p>{book.genre}</p>\r\n          <p>{book.author.name}</p>\r\n          <p>All books by this author.</p>\r\n          <ul className=\"other-books\">\r\n            {book.author.books.map((item) => {\r\n              return <li key={item.id}>{item.name}</li>;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>No Book Selected.</div>;\r\n    }\r\n  }\r\n  render() {\r\n    return <div id=\"book-details\">{this.displayBookDetails()}</div>;\r\n  }\r\n}\r\n\r\nexport default graphql(getBookQuery, {\r\n  options: (props) => {\r\n    return {\r\n      variables: {\r\n        id: props.bookId,\r\n      }, //variables\r\n    }; //return\r\n  },\r\n})(BookDetails);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBooksQuery } from \"./../queries/queries\";\r\nimport BookDetails from \"./BookDetails\";\r\n\r\nclass BookList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: null,\r\n    };\r\n  }\r\n  displayBooks() {\r\n    var data = this.props.data;\r\n    if (data.loading) {\r\n      return <div>Loading books...</div>;\r\n    } else {\r\n      return data.books.map((book) => {\r\n        return (\r\n          <li\r\n            key={book.id}\r\n            onClick={(e) => {\r\n              this.setState({ selected: book.id });\r\n            }}\r\n          >\r\n            {book.name}\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul id=\"book-list\">{this.displayBooks()}</ul>\r\n        <BookDetails bookId={this.state.selected} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { flowRight as compose } from \"lodash\";\r\nimport {\r\n  getAuthorsQuery,\r\n  addBookMutation,\r\n  getBooksQuery,\r\n} from \"./../queries/queries\";\r\n\r\nclass AddBook extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      genre: \"\",\r\n      authorId: \"\",\r\n    };\r\n  }\r\n  displayAuthors() {\r\n    var data = this.props.getAuthorsQuery;\r\n    if (data.loading) {\r\n      return <option disabled>Loading...</option>;\r\n    } else {\r\n      return data.authors.map((author) => {\r\n        return (\r\n          <option key={author.id} value={author.id}>\r\n            {author.name}\r\n          </option>\r\n        );\r\n      });\r\n    }\r\n  }\r\n  submitForm(e) {\r\n    e.preventDefault();\r\n    this.props.addBookMutation({\r\n      variables: {\r\n        name: this.state.name,\r\n        genre: this.state.genre,\r\n        authorId: this.state.authorId,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getBooksQuery,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\r\n        <div className=\"field\">\r\n          <label>Book name</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              this.setState({ name: e.target.value });\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <label>Genre</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => {\r\n              this.setState({ genre: e.target.value });\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <label>Author:</label>\r\n          <select\r\n            onChange={(e) => {\r\n              this.setState({ authorId: e.target.value });\r\n            }}\r\n          >\r\n            <option>Select author</option>\r\n            {this.displayAuthors()}\r\n          </select>\r\n        </div>\r\n        <button type=\"Submit\">Add Book</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n  graphql(addBookMutation, { name: \"addBookMutation\" })\r\n)(AddBook);\r\n","import React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n//components\nimport BookList from \"./components/BookList\";\nimport AddBook from \"./components/AddBook\";\n\n//apollo client setup\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div id=\"main\">\n          <h2>HufflePuff Book List</h2>\n          <BookList />\n          <AddBook />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}